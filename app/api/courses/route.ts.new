import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';
import { getCourses } from '@/lib/courses';

// Schema for course creation/validation
const createCourseSchema = z.object({
  title: z.string().min(1, 'عنوان الدورة مطلوب'),
  titleAr: z.string().min(1, 'العنوان بالعربية مطلوب'),
  description: z.string().min(1, 'وصف الدورة مطلوب'),
  descriptionAr: z.string().min(1, 'الوصف بالعربية مطلوب'),
  subject: z.enum([
    'MATHEMATICS', 'PHYSICS', 'CHEMISTRY', 'BIOLOGY', 'ARABIC_LITERATURE',
    'FRENCH', 'ENGLISH', 'HISTORY', 'GEOGRAPHY', 'PHILOSOPHY',
    'ISLAMIC_STUDIES', 'ECONOMICS', 'ACCOUNTING', 'COMPUTER_SCIENCE'
  ]),
  grade: z.enum([
    'PREMIERE_AS', 'PREMIERE_AL', 'DEUXIEME_AS', 'DEUXIEME_AL',
    'TERMINALE_AS', 'TERMINALE_AL', 'TERMINALE_TM', 'TERMINALE_GE'
  ]),
  difficulty: z.enum(['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'BAC_LEVEL']).default('BEGINNER'),
  curriculum: z.string().min(1, 'رمز المنهاج مطلوب'),
  bacRelevance: z.number().min(0).max(1).default(0),
  estimatedHours: z.number().min(1, 'عدد الساعات مطلوب'),
  isFree: z.boolean().default(false),
  isPublished: z.boolean().default(false)
});

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Convert search params to the format expected by our getCourses function
    const subject = searchParams.get('subject') !== 'all' ? searchParams.get('subject') || undefined : undefined;
    const grade = searchParams.get('grade') !== 'all' ? searchParams.get('grade') || undefined : undefined;
    const isFree = searchParams.has('isFree') ? searchParams.get('isFree') === 'true' : undefined;
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '12');
    
    // Use our courses helper function
    const coursesData = await getCourses({
      subject,
      grade,
      isFree,
      page,
      limit
    });
    
    return NextResponse.json({
      success: true,
      data: coursesData
    });
  } catch (error) {
    console.error('Error fetching courses:', error);
    return NextResponse.json({
      success: false,
      error: 'خطأ في جلب الدورات'
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate input data
    const validationResult = createCourseSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json({
        success: false,
        errors: validationResult.error.flatten().fieldErrors
      }, { status: 400 });
    }
    
    const courseData = validationResult.data;
    
    // Create new course
    const course = await prisma.course.create({
      data: courseData
    });
    
    return NextResponse.json({
      success: true,
      data: course
    });
  } catch (error) {
    console.error('Error creating course:', error);
    return NextResponse.json({
      success: false,
      error: 'خطأ في إنشاء الدورة'
    }, { status: 500 });
  }
}
